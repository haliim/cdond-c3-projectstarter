version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string 
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            STATUS=$(curl -H "Content-Type: text/plain" -H "token: e82f2c03-85db-4294-941c-178d1071af39" --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID:0:7})
            if(( $STATUS==0 )); # 0 means failed migration
            then
            cd ~/project/backend
            npm install
            npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-End Test
          command: |
              cd frontend
              npm install
              npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-End Test
          command: |
              cd backend
              npm install
              npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-End Analysis
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-End Analysis
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical --force
              npm audit --audit-level=critical
          
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:2.3.2
    steps:
      - checkout
      - run:
          name: deploy-infrastructure
          command: |
              yum -y install tar gzip

      - run:
          name: Ensure backend infrastructure exist
          command: |
              aws cloudformation deploy \
                  --template-file .circleci/files/backend.yml \
                  --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=udapeople

      - run:
          name: Ensure frontend infrastructure exist
          command: |
              aws cloudformation deploy \
                  --template-file .circleci/files/frontend.yml \
                  --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                  --tags project=udapeople

      - run:
          name: Fetch the public IP of the EC2 instance
          command: |
              aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text >> .circleci/inventory.txt

#              aws ec2 describe-instances \
#                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
#                  --filters "Name=tag:Name,Values=backend-${ID}" \
#                  --output text >> .circleci/inventory

      - run:
          name: Add back-end ip to ansible inventory
          command: |
              aws ec2 describe-instances \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text >> .circleci/ansible/inventory.txt
              backendip=$(aws ec2 describe-instances \
                --query "Reservations[*].Instances[*].PublicIpAddress" \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output=text)
              curl -H "Content-Type: text/plain" -H "token: 44dcdd32-1ac6-4124-852c-6e4a6ed19cc6" --request PUT --data "$backendip" https://api.memstash.io/values/udapeople
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  
  
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "2d:0a:88:cc:e4:44:e5:b1:c9:66:c1:de:76:9d:2e:90"
      - attach_workspace:
          at: ~/project
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: Set up inventory file
          command: |
            cd .circleci/ansible
            URLS=$(curl -H "token: 44dcdd32-1ac6-4124-852c-6e4a6ed19cc6" --request GET https://api.memstash.io/values/udapeople)
            echo "$URLS" >> inventory.txt
            cat inventory.txt
        
      - run:
          name: Configure server with ansible
          no_output_timeout: 30m
          command: |
            echo "1st Down HERE"
            echo $TYPEORM_DATABASE
            echo "1st Up HERE"
            echo ENVIRONMENT=production > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            echo "2nd Down HERE"
            echo $TYPEORM_DATABASE
            cat "backend/.env"
            echo "2nd Up HERE"
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            cat inventory.txt
            

      # Here's where you will add some code to rollback on failure 

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install awscli
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -qq install awscli            
            sudo apt-get -y -qq install python3
      - run:
          name: create .env files
          command: |
            echo NODE_ENV=production > "backend/.env"
            echo VERSION=1 >> "backend/.env"
            echo ENVIROMENT=development >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            echo "cd backend"
            export
            echo "export"
            npm install
            echo "npm install"
            npm run build
            echo "npm run build"
            touch migration_results.txt
            echo "touch migration_results.txt"
            npm run migrations > migration_results.txt
            echo "npm run migrations >> migration_results.txt"
            cat migration_results.txt
            echo "cat migration_results.txt"
      - run:
          name: save migrations
          command: |
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            cd backend
            if grep "has been executed successfully" migration_results.txt
            then
            echo "DB migration was successful"
            curl -H "Content-Type: text/plain" -H "token: 81127b7f-5fe2-4404-b65f-5d1f9e986044" --request PUT --data "1" https://api.memstash.io/values/migration
            else
            echo "DB migration has failed"
            curl -H "Content-Type: text/plain" -H "token: 81127b7f-5fe2-4404-b65f-5d1f9e986044" --request PUT --data "0" https://api.memstash.io/values/migration
            fi
     # Here's where you will add some code to rollback on failure       

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip 
            echo "yum -y install tar gzip "
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            echo "curl -sL https://rpm.nodesource.com/setup_lts.x | bash -"
            yum -y install nodejs 
            echo "yum -y install nodejs"
      - attach_workspace:
          at: ~/project

      - run:
          name: Get backend url
          command: |
            ls -l ~/project
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output=text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
#      - scan-backend:
#          requires: [build-backend]
      - deploy-infrastructure:
          requires: [build-backend, build-frontend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]

